#!/usr/bin/Rscript
# Copyright (C) 2012 Joel Granados <joel.granados@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

library(getopt)

usage <- function( optMat, st=0 )
{
    cat ( "Usage:\n" )
    cat ( cmdCmd, " OPTIONS\n", sep="" )
    cat ( "\nOPTIONS\n" )

    for ( i in 1:dim(optMat)[1] )
        cat ( "  [--",optMat[i,1],"|-",optMat[i,2],"]\n",optMat[i,5], sep="")
    cat ("\n")

    flush.console()
    return (st)
}

version <- function()
{
    cat ( "\tName: @EIP_NAME@\n" )
    cat ( "\tVersion: @EIP_VER_MAJOR@.@EIP_VER_MINOR@.@EIP_VER_DATE@\n" )
    return (0)
}

ecoip_plot <- function ( arguments = "" )
{
    optMat = matrix ( data=c(
    "help",     "h",    0, "logical",
        "\tPrints help information\n",
    "examples", "e",   0, "logical",
        "\tPrints example commands to get you started\n",
    "version",  "v",    0, "logical",
        "\tPrints version information\n",

    "tfile",     "a",    2, "character",
        "\tFile where the table is kept. Has no default.\n",

    "type",     "t",    2, "character",
        "\tType of plot: l: line, p: points. Defaults to l.\n",

    "color",    "c",    2, "character",
        "\tColor of lines: [red|blue|green|yellow...]Defaults to red.\n",

    "xlab",     "x",    2, "character",
        "\tName of X axis. Defaults to Time\n",
    "ylab",     "y",   2, "character",
        "\tName of Y axis. Defaults to Value.\n",

    "width",    "w",  2, "integer",
        "\tWidth of the resulting figure. Defaults to 1024.\n",
    "height",   "H",    2, "integer",
        "\tHeight of the resulting figure. Defaults to 768.\n",

    "lwidth",    "l",  2, "double",
        "\tLine width.\n",

    "output",   "o",    2, "character",
        "\tName of the output file. Defaults to plot.svg.\n",

    "minimum_show",   "m",    2, "double",
        "\tAll values over this will be given a label tick.\n",

    "show_all",   "s",    2, "logical",
        "\tWhen true we try to put as many labels in X as possible.\n",

    "ignore_missing",   "i",    2, "logical",
        "\tDon't plot the missing dates.\n",

    "space_color",   "S",    2, "character",
        "\tThe color of the missing date spaces. Defaults to \"azure\"\n",

    "mark_training", "M",   2, "character",
        "\t[FROMDATE,TODATE] Date range for training. Default is NULL.\n",

    "color_training", "C", 2, "character",
        "\tDefault color for training rect, Default is \"#FFF0FFAA\".\n",

    "title",    "T",   2, "character",
        "\tPlot title. Defaults to Phenology Plot.\n" ),
    ncol=5, byrow=T )
    cmdArgs = strsplit(arguments, " ")[[1]]
    opts = getopt ( optMat, opt=cmdArgs )

    # Take care of simple user commands.
    if ( !is.null(opts$help) )
        return (usage(optMat))
    if ( !is.null(opts$version) )
        version()
    if ( is.null(opts$tfile) )
        return (usage(optMat, st=1))
    if ( length(cmdArgs) == 0 )
        return (usage(optMat, st=1))

    # Set the defaults
    if (is.null(opts$type)) {opts$type = "l"}
    if (is.null(opts$color)) {opts$color = "red"}
    if (is.null(opts$xlab)) {opts$xlab = "Time"}
    if (is.null(opts$ylab)) {opts$ylab = "Value"}
    if (is.null(opts$width)) {opts$width = 10}
    if (is.null(opts$height)) {opts$height = 5}
    if (is.null(opts$output)) {opts$output = "plot.eps"}
    if (is.null(opts$title)) {opts$title = "Title"}
    if (is.null(opts$show_all)) {opts$show_all = FALSE}
    if (opts$show_all) {opts$minimum_show = 0}
    if (is.null(opts$minimum_show)) {opts$minimum_show = -1}
    if (is.null(opts$ignore_missing)) {opts$ignore_missing = FALSE}
    if (is.null(opts$lwidth)) {opts$lwidth = 0.25}
    if (is.null(opts$space_color)) {opts$space_color = "#F0FFFFAA"}
    if (is.null(opts$color_training)) {opts$color_training = "#FFF0FFAA"}
    if (is.null(opts$mark_training)) {opts$mark_training = NULL}


    eip.plot ( opts$tfile, ignore_missing=opts$ignore_missing,
               output=opts$output, width=opts$width, height=opts$height,
               lwidth=opts$lwidth, xlabl=opts$xlab, ylabl=opts$ylab,
               type=opts$type, lcolor=opts$color, ptitle=opts$title,
               minimum_show=opts$minimum_show,
               missing_color=opts$space_color, mark_training=opts$mark_training,
               color_training=opts$color_training )
}

# calculate argument list.
if ( length(grep("run_test.R", commandArgs())) > 0 )
{
    # this is not an rscript (This is for testing)
    # We don't really need cmdArgs
    if ( !exists("cmdStr") )
        cmdArgs = c ( "--help" )
    if ( !exists("cmdCmd") ){
        cmdCmd = c ("./ecoip")
        cmdDir = c("./")
    }
    if ( !exists("cmdDir") )
        stop ("Unknown error")

    # Bring all relevant code into the namespace
    source(file.path(cmdDir,"ecoip.R"), chdir=TRUE)

    # The calling script needs to make the callto ecoip_exec
} else {
    # This is an rscript
    cmdArgs = commandArgs()
    cmdStr = paste(commandArgs(TRUE), collapse=" ")
    cmdCmd = sub("--file=", "", cmdArgs[grep("--file=", cmdArgs)])
    cmdDir = dirname(cmdCmd)

    # Bring all relevant code into the namespace
    source(file.path(cmdDir,"ecoip.R"), chdir=TRUE)

    # execute the command
    retval = ecoip_plot ( arguments=cmdStr )

    # exit
    q(sa="no", st=retval)
}
