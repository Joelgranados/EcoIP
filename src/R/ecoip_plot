#!/usr/bin/Rscript
# Copyright (C) 2012 Joel Granados <joel.granados@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

library(getopt)

usage <- function( optMat, st=0 )
{
    cat ( "Usage:\n" )
    cat ( cmdCmd, " OPTIONS\n", sep="" )
    cat ( "\nOPTIONS\n" )

    for ( i in 1:dim(optMat)[1] )
        cat ( "  [--",optMat[i,1],"|-",optMat[i,2],"]\n",optMat[i,5], sep="")
    cat ("\n")

    flush.console()
    return (st)
}

version <- function()
{
    cat ( "\tName: @EIP_NAME@\n" )
    cat ( "\tVersion: @EIP_VER_MAJOR@.@EIP_VER_MINOR@.@EIP_VER_DATE@\n" )
    return (0)
}

ecoip_plot_generate <- function( opts )
{
    # Get the data
    table = try(read.table(opts$tfile), silent=TRUE)
    if ( class(table) == "try-error" )
    {
        if ( class(try(load(opts$tfile), silent=TRUE)) == "try-error" )
            stop ( "The ", table, " file does not contain data" )
    }

    # Output to EPS.
    postscript(file=opts$output, width=opts$width,height=opts$height)

    # FIXME: Give control to the user
    LWD = .5 # Linewidth
    CEX = .1 # Fontsize
    MS = -1 # MinimumShow
    SUBFROM = 1
    SUBTO = 10

    # Calc Indices
    if ( MS < 0 )
        MS = min(table[,2]) + abs(min(table[,2])+max(table[,2])*0.25)
    tmpInd = table[,2]>MS

    # Calc the tick strings
    labls = substr(basename(as.character(table[tmpInd,1])),SUBFROM, SUBTO)

    # Calc the points where I want to draw a tick.
    AT = which(tmpInd)

    # This is painful. To avoid label overlap only include one tick per "clumped
    # label group". Remove overlapping labels from min distance. This min
    # distance is a function of the plot size and the font size.
    MD = ( (par("cin")[1]*CEX)
           / ( par("fin")[1]/abs(abs(par("usr")[1])-abs(par("usr")[2])) ) )

    ATtmp = c(AT[1])
    Ltmp  = c(labls[1])
    for ( i in 1:(length(AT)-1) )
    {
        DIST = abs(ATtmp[length(ATtmp)] - AT[i+1])
        if ( DIST > MD )
        {
            ATtmp = c(ATtmp, AT[i+1])
            Ltmp = c(Ltmp, labls[i+1])
        }
    }
    AT = ATtmp
    labls = Ltmp

    # Calculate the relative down. Used to place X tick labels
    RD = par("usr")[3]-(abs(par("usr")[3]-par("usr")[4])*0.05)

    plot(table[,2], pch=21, xlab=opts$xlab, ylab=opts$ylab,
         type=opts$type, col=opts$color, main=opts$title, axes=F, lwd=LWD)

    # draw axis
    axis(2)
    axis(1, AT, labels=FALSE, lwd=LWD, lwd.ticks=LWD)
    text(AT, RD, srt = 90, adj = 1, labels = labls, xpd = TRUE, cex=CEX)
    box()

    dev.off()
}

ecoip_plot_exec <- function ( arguments = "" )
{
    optMat = matrix ( data=c(
    "help",     "h",    0, "logical",
        "\tPrints help information\n",
    "examples", "e",   0, "logical",
        "\tPrints example commands to get you started\n",
    "version",  "v",    0, "logical",
        "\tPrints version information\n",

    "tfile",     "a",    2, "character",
        "\tFile where the table is kept. Has no default.\n",

    "type",     "t",    2, "character",
        "\tType of plot: l: line, p: points. Defaults to l.\n",

    "color",    "c",    2, "character",
        "\tColor of lines: [red|blue|green|yellow...]Defaults to red.\n",

    "xlab",     "x",    2, "character",
        "\tName of X axis. Defaults to Time\n",
    "ylab",     "y",   2, "character",
        "\tName of Y axis. Defaults to Value.\n",

    "width",    "w",  2, "integer",
        "\tWidth of the resulting figure. Defaults to 1024.\n",
    "height",   "H",    2, "integer",
        "\tHeight of the resulting figure. Defaults to 768.\n",

    "output",   "o",    2, "character",
        "\tName of the output file. Defaults to plot.svg.\n",

    "title",    "T",   2, "character",
        "\tPlot title. Defaults to Phenology Plot.\n" ),
    ncol=5, byrow=T )
    cmdArgs = strsplit(arguments, " ")[[1]]
    opts = getopt ( optMat, opt=cmdArgs )

    # Take care of simple user commands.
    if ( !is.null(opts$help) )
        return (usage(optMat))
    if ( !is.null(opts$version) )
        version()
    if ( is.null(opts$tfile) )
        return (usage(optMat, st=1))
    if ( length(cmdArgs) == 0 )
        return (usage(optMat, st=1))

    # Set the defaults
    if (is.null(opts$type)) {opts$type = "l"}
    if (is.null(opts$color)) {opts$color = "red"}
    if (is.null(opts$xlab)) {opts$xlab = "Time"}
    if (is.null(opts$ylab)) {opts$ylab = "Value"}
    if (is.null(opts$width)) {opts$width = 10}
    if (is.null(opts$height)) {opts$height = 5}
    if (is.null(opts$output)) {opts$output = "plot.eps"}
    if (is.null(opts$title)) {opts$title = "Title"}

    ecoip_plot_generate( opts )
}
cmdArgs = commandArgs()
cmdStr = paste(commandArgs(TRUE), collapse=" ")
cmdCmd = sub("--file=", "", cmdArgs[grep("--file=", cmdArgs)])

ecoip_plot_exec ( arguments = paste(commandArgs(TRUE), collapse=" ") )
